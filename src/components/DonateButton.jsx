import React, { useState } from "react";
import axios from "axios";

// DonateButton Component: Handles payment processing using Razorpay
const DonateButton = () => {
  // State to manage loading state when processing payment
  const [loading, setLoading] = useState(false);

  // State to manage the donation amount entered by the user
  const [donationAmount, setDonationAmount] = useState("");

  // Function to handle payment initiation
  const handlePayment = async () => {
    // Validate the donation amount
    if (!donationAmount || isNaN(donationAmount)) {
      alert("‚ö†Ô∏è Please enter a valid donation amount.");
      return;
    }

    setLoading(true); // Set loading to true when payment starts
    try {
      // Step 1: Create an order by calling the backend API
      const { data } = await axios.post(
        "http://localhost:4001/api/donations/razorpay",
        { amount: donationAmount, currency: "INR" } // Convert amount to paisa
      );

      // Step 2: Razorpay payment options
      const options = {
        key: import.meta.env.VITE_RAZORPAY_KEY_ID, // Razorpay API Key from environment variables
        amount: data.amount, // Amount to be paid (in paisa)
        currency: data.currency, // Currency (INR in this case)
        name: "RAJKUMAR YOGI", // Organization name
        description: "Support our cause with your donation", // Payment description
        order_id: data.id, // Unique order ID generated by Razorpay

        // Step 3: Payment success handler
        handler: async function (response) {
          try {
            // Send the payment response to the backend for verification
            await axios.post("http://localhost:4001/api/donations/razorpay/verify", response);
            alert("üéâ Payment Successful! Thank you for your support.");
          } catch (error) {
            alert("‚ö†Ô∏è Payment verification failed. Please contact support.");
          }
        },

        // Prefilled user details (optional, can be dynamically set)
        prefill: {
          name: "John Doe", // Donor's name
          email: "johndoe@example.com", // Donor's email
          contact: "9999999999", // Donor's phone number
        },

        // Theme customization for Razorpay popup
        theme: {
          color: "#4F46E5", // Button color (can be changed)
        },
      };

      // Step 4: Open the Razorpay payment popup
      const rzp = new window.Razorpay(options);
      rzp.open();
    } catch (error) {
      console.error("Payment error:", error);
      alert("‚ö†Ô∏è Payment failed. Please try again.");
    } finally {
      setLoading(false); // Reset loading state after payment attempt
    }
  };

  return (
    <div className="flex flex-col items-center space-y-4">
      {/* Input field for donation amount */}
      <input
        type="number"
        placeholder="Enter amount (‚Çπ)"
        value={donationAmount}
        onChange={(e) => setDonationAmount(e.target.value)}
        className="mt-4 px-4 py-2 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 text-black"
      />

      {/* Donate button */}
      <button
        onClick={handlePayment}
        disabled={loading || !donationAmount} // Disable button if loading or no amount entered
        className="px-6 py-3 text-black font-semibold bg-yellow-500 hover:bg-yellow-600 
                   focus:ring-4 focus:ring-blue-300 rounded-xl transition duration-200 
                   disabled:opacity-50 disabled:cursor-not-allowed"
      >
        {loading ? "Processing..." : `Donate ‚Çπ${donationAmount}`} {/* Button text changes when loading */}
      </button>
    </div>
  );
};

export default DonateButton;